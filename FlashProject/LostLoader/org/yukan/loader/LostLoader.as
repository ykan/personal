///////////////////////////////////////////////////////////
//  LostLoader.as
//  Macromedia ActionScript Implementation of the Class LostLoader
//  Generated by Enterprise Architect
//  Created on:      30-四月-2011 17:52:18
//  Original author: YuKan
///////////////////////////////////////////////////////////

package org.yukan.loader
{
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.net.URLLoader;
	import flash.net.URLRequest;
	import flash.system.Security;
	
	import org.yukan.event.LLEvent;
	import org.yukan.event.LLProgressEvent;
	import org.yukan.event.LLErrorEvent;	
	import org.yukan.data.LLItem;
	import org.yukan.data.LLModel;
	
	/**
	 * @author YuKan
	 * @version 1.0
	 * @created 30-四月-2011 17:52:18
	 */
	public class LostLoader extends AbstractLoader
	{
		private var configLoader:URLLoader;
		private var llmodel:LLModel;
		
		private var loader:AbstractLoader;
		
		private var sameDomain:Boolean = true;//资源和程序是否在相同的域
		private var hasConfig:Boolean = false;//程序是不是含有配置表
		private var llconfigRep:RegExp = /LostLoaderConfig.xml/;
		
		private var isLoop:Boolean = false;
				
		/**
		 * 进行加载操作
		 * 
		 * @param	url
		 */
		public function load(url:String):void 
		{
			if (llconfigRep.test(url)) 
			{
				trace("this is a xml resouce list.\n");
				loadConfig(url);
			}else 
			{
				trace("Error. This is not a resource XML");
			}
		}
		//加载配置表
		private function loadConfig(url:String):void 
		{
			trace(Security.sandboxType);
			switch (Security.sandboxType) 
			{
				case Security.REMOTE:
					var temp:String = url;
					var crossdomainFile:String = temp.replace(llconfigRep, "crossdomain.xml");
					Security.loadPolicyFile(crossdomainFile);
					configLoader = new URLLoader(new URLRequest(url));
					configLoader.addEventListener(Event.COMPLETE, configLoadComplete);
					configLoader.addEventListener(IOErrorEvent.IO_ERROR, configLoadError);
				break;
				case Security.LOCAL_WITH_NETWORK:
					trace("无法访问配置表");//配置表应与程序在同一目录中
				break;
				default:
					configLoader = new URLLoader(new URLRequest(url));
					configLoader.addEventListener(Event.COMPLETE, configLoadComplete);
					configLoader.addEventListener(IOErrorEvent.IO_ERROR, configLoadError);
				break;
			}
		}
		//配置表的XML加载完成
		private function configLoadComplete(e:Event):void 
		{
			trace("config loaded");
			configLoader.removeEventListener(Event.COMPLETE, configLoadComplete);
			
			hasConfig = true;
			
			var config:XML = XML(configLoader.data);
			configXML(config);
		}
		//处理配置
		private function configXML(config:XML):void 
		{
			
			llmodel.storeType = config.configure.@loadTpye;
			
			if (config.configure.@extenalLoaderType == "true") 
			{
				addLoaderType(XML(config.type));
			}
			
			resHandler(XML(config.resource));
		}
		//添加Loader类型
		private function addLoaderType(type:XML):void 
		{
			for each(var loader:XML in type.loader) 
			{
				trace("add extenal loader:"+loader);
				llmodel.addLoaderType(loader, loader.@type);
			}
			
		}
		//处理资源Item
		private function resHandler(resource:XML):void 
		{
			trace("handler resource");
			for each(var data:XML in resource.data) 
			{
				for each (var element:XML in data.element) 
				{
					llmodel.add(data.@type, element.@name, element);
				}
			}
			super.dispatchEvent(new LLEvent(LLEvent.CONFIG_SUCCESS));
		}
		//error
		private function configLoadError(e:IOErrorEvent):void 
		{
			trace("io_error");
			super.dispatchEvent(new LLErrorEvent(LLErrorEvent.LOAD_XML_FAIL));
		}
		
		
		/**
		 * 代理加载
		 */
	    override public function loadItem(item:LLItem): void
	    {
			trace("load item");
			loader = llmodel.selectLoader(item.type);
			loader.loadItem(item);
			loader.addEventListener(LLEvent.ITEM_COMPLETE, lcomplete);
			loader.addEventListener(LLProgressEvent.PROGRESS, lprogress);
			loader.addEventListener(LLErrorEvent.LOAD_ITEM_FAIL, lioerror);
	    }
		private function lcomplete(e:LLEvent):void 
		{
			loader.removeEventListener(LLEvent.ITEM_COMPLETE, lcomplete);
			loader.removeEventListener(LLProgressEvent.PROGRESS, lprogress);
			loader.removeEventListener(LLErrorEvent.LOAD_ITEM_FAIL, lioerror);
			
			super.dispatchEvent(e);
			
			if (isLoop) 
				loadloop();
		}
		private function lprogress(e:LLProgressEvent):void 
		{
			super.dispatchEvent(e);
		}
		private function lioerror(e:LLErrorEvent):void 
		{
			super.dispatchEvent(e);
		}
		
		/**
		 * 加载特定的item
		 * 
		 * @param	name
		 * @param	type
		 */
		public function loadSpecialItem(name:String, type:String):void 
		{
			if (!hasConfig) 
				return;
			
			var item:LLItem = llmodel.select(name, type);
			loadItem(item);			
		}
		
		/**
		 * 队列加载
		 */
		public function startQueue():void 
		{
			trace("hasConfig:"+hasConfig);
			if (!hasConfig) 
				return;
			
			trace("start queue");
			isLoop = true;
			loadloop();
		}
		private function loadloop():void 
		{
			var item:LLItem;
			if (llmodel.hasNext()) 
				item = llmodel.next();
			else { 
				super.dispatchEvent(new LLEvent(LLEvent.QUEUE_COMPLETE));
				return;
			}
			loadItem(item);
		}
		
		/**
		 * 构造函数
		 */
	    public function LostLoader(configxml:String = null)
	    {
			llmodel = LLModel.getInstance();
			
			if (configxml != null) 
				load(configxml);
				
	    }
	}//end LostLoader

}