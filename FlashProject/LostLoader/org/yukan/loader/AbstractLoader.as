///////////////////////////////////////////////////////////
//  AbstractLoader.as
//  Macromedia ActionScript Implementation of the Class AbstractLoader
//  Generated by Enterprise Architect
//  Created on:      30-四月-2011 17:52:17
//  Original author: YuKan
///////////////////////////////////////////////////////////

package org.yukan.loader
{
	import flash.events.IEventDispatcher;
	import flash.events.EventDispatcher;
	import flash.events.Event;
	import flash.events.ProgressEvent;
	import flash.events.IOErrorEvent;
	
	import org.yukan.data.LLItem;
	import org.yukan.gc.IGC;
	import org.yukan.event.*;
	
	/**
	 * @author YuKan
	 * @version 1.0
	 * @created 30-四月-2011 17:52:17
	 */
	public class AbstractLoader implements ILoader, IGC
	{
		public static const type:String = "abstract";
		protected var item:LLItem;
		protected var llpevent:LLProgressEvent = new LLProgressEvent(LLProgressEvent.PROGRESS);
		
		public function AbstractLoader(){

		}

	    public function dispose(): void
	    {
	    }

	    /**
	     * 
	     * @param resource    url
	     */
	    public function loadItem(item:LLItem): void
	    {
			this.item = item;
			
			llpevent.num  = this.item.num;
			llpevent.name = this.item.name;
			llpevent.datatype = this.item.type;
	    }
		protected function complete(e:Event):void 
		{
			trace("item:"+item.url+" load complete");
			var llevent:LLEvent = new LLEvent(LLEvent.ITEM_COMPLETE);
			llevent.item = this.item;
			dispatchEvent(llevent);
		}
		protected function progress(e:ProgressEvent):void 
		{
			//trace("Progress");
			
			llpevent.bytesLoaded = e.bytesLoaded;
			llpevent.bytesTotal = e.bytesTotal;
			dispatchEvent(llpevent);
			
		}
		protected function ioerror(e:IOErrorEvent):void 
		{
			trace("Item load fail");
			dispatchEvent(new LLErrorEvent(LLErrorEvent.LOAD_ITEM_FAIL));
			
		}
		
	/*	//获取Loader类型
		public static function get type():String 
		{
			return _type;
		}
*/
		
		//IEventDispatcher
		private var dispatcher:EventDispatcher = new EventDispatcher();

		public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void{
			dispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);
		}

		public function dispatchEvent(event:Event):Boolean{
			return dispatcher.dispatchEvent(event);
		}

		public function hasEventListener(type:String):Boolean{
			return dispatcher.hasEventListener(type);
		}

		public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void{
			dispatcher.removeEventListener(type, listener, useCapture);
		}

		public function willTrigger(type:String):Boolean{
			return dispatcher.willTrigger(type);
		}
		
	}//end AbstractLoader

}