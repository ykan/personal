///////////////////////////////////////////////////////////
//  LLModel.as
//  Macromedia ActionScript Implementation of the Class LLModel
//  Generated by Enterprise Architect
//  Created on:      30-四月-2011 17:52:18
//  Original author: YuKan
///////////////////////////////////////////////////////////

package org.yukan.data
{	
	import org.yukan.loader.AbstractLoader;
	import org.yukan.gc.IGC;
	

	/**
	 * @author YuKan
	 * @version 1.0
	 * @created 30-四月-2011 17:52:18
	 */
	public class LLModel implements ILLIterator, ILLType
	{
	    static private var instance: LLModel;
		public static const FULl:String = "full";
		public static const WEAK:String = "weak";
		
		//实现外观
	    private var llIterator:ILLIterator;
	    private var llType: LLType;

		//单例实现
		public function LLModel(){
			if (instance != null) 
			{
				throw new Error("单例");
			}
			llIterator = new LLFullData;
			llType = new LLType;
			
			instance = this;
		}
	    static public function getInstance(): LLModel
	    {
			if (instance == null) 
			{
				return new LLModel();
			}
			
			return instance;
	    }
	    /**
	     * 添加LLItem
		 * 
	     * @param name
	     * @param type    type
	     */
	    public function add(type:String, name:String, url:String, data:Object = null): void
	    {
			llIterator.add(type, name, url, data);
	    }

		/**
		 * 判断是否有下一个LLItem
		 * 
		 * @return
		 */
	    public function hasNext(): Boolean
	    {
			return llIterator.hasNext();
	    }

		/**
		 * 下一个LLItem
		 * 
		 * @return
		 */
	    public function next(): LLItem
	    {
			return llIterator.next();
	    }
		/**
	     * 选择特定的LLItem
		 * 
	     * @param name
	     * @param type    type
	     */
	    public function select(name:String, type:String):LLItem
	    {
			return llIterator.select(name,type);
	    }
		
		
		
		private var _storeType:String;
		/**
		 * 设置数据存储方式
		 */
		public function set storeType(values:String):void 
		{
			_storeType = values;
			switch (_storeType) 
			{
				case WEAK:
					llIterator = new LLWeakData();
				break;
				default:
					llIterator = new LLFullData();
				break;
			}
			
		}
		public function get storeType():String 
		{
			return _storeType;
		}
		
		//在LLtype中加入顶级程序域
		/*public function set topAppDomain(value:ApplicationDomain):void 
		{
			llType.topAppDomain = value;
		}*/

	   
	    /**
	     * 添加外部自定义的Loader
		 * 
	     * @param loader
	     * @param type
	     */
	    public function addLoaderType(loader:String, type:String): void
	    {
			llType.addLoaderType(loader,type);
	    }

	    /**
	     * 选择所需要的Loader
		 * 
	     * @param type
	     */
	    public function selectLoader(type:String): AbstractLoader
	    {
			return llType.selectLoader(type);
	    }
		
		//IGC
		public function dispose():void 
		{
			llType.dispose();
			llIterator.dispose();
		}


	}//end LLModel

}